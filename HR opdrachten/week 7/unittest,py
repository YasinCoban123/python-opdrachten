
# Opmerking: De aanpak die hier wordt laten zien, is een eenvoudige introductie in unit testen. 
# Later zal je meer diepgaande technieken leren met behulp van de ingebouwde frameworks en libraries van Python

contacts = []

def add_contact(name, phone_number, email):
    contact = {
        'name': name,
        'phone_number': phone_number,
        'email': email
    }
    contacts.append(contact)

def search_by_name(name):
    return list(filter(lambda c: name.lower() in c['name'].lower(), contacts))

def delete_contact(name):
    for contact in contacts:
        if contact['name'].lower() == name.lower():
            contacts.remove(contact)

def test():
    # Test adding a contact
    add_contact('John Doe', '06876543210', 'john@hotemail.com')
    # Checken of de contact correct is toegevoegd
    assert len(contacts) == 1, f"Expected 1 contact, but got {len(contacts)}"
    assert contacts[0]['name'] == 'John Doe', f"Expected name 'John Doe', but got {contacts[0]['name']}"

    # Test searching contacts
    search_results = search_by_name("John")
    # Check of de zoekresultaat correct is.
    assert len(search_results) == 1, f"Expected 1 search result, but got {len(search_results)}"
    assert search_results[0]['name'] == 'John Doe', f"Expected name 'John Doe', but got {search_results[0]['name']}"

    # Test deleting a contact
    delete_contact("John Doe")
    # Checken of de contact correct is verwijderd
    assert len(contacts) == 0, f"Expected 0 contacts, but got {len(contacts)}"

    print("All tests passed successfully.")

test()
